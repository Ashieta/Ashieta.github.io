<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>届かない恋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-22T05:12:49.294Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Shao Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ViDeZZo源码与实现思路</title>
    <link href="http://example.com/2023/07/21/ViDeZZo%E6%BA%90%E7%A0%81%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>http://example.com/2023/07/21/ViDeZZo%E6%BA%90%E7%A0%81%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</id>
    <published>2023-07-21T14:42:34.000Z</published>
    <updated>2023-07-22T05:12:49.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纪念我的第二篇Blog，第一篇有我的idea就不放出来了。</p><p>纪念浙江大学玉泉校区曹主楼320的橙色暴雨预警的深夜。</p><p>给个书读吧求求了。——js 7.21</p></blockquote><h2 id="编译构建"><a href="#编译构建" class="headerlink" title="编译构建"></a>编译构建</h2><ol><li>编译命令：make qemu qemu-coverage</li></ol><p>当前目录中的make videzzo-core</p><ol start="2"><li>make videzzo-core</li></ol><p>运行videzzo_types_gen.py</p><p>videzzo_tool中的all（做merge和产生PoC的，先忽略掉）</p><p>编译videzzo.c和videzzo_types.c，打包成静态库</p><ol start="3"><li>videzzo_qemu目录中的make qemu clusterfuzz还有qemu-coverage clusterfuzz-coverage</li></ol><p>qemu-dep安装依赖并且下载qemu；make patch。</p><p>make patch：把patch脚本复制到qemu源码中并执行patch。这个patch看上去像是qtest框架的东西。</p><p>make compile：</p><p>执行copy脚本把当前目录下的videzzo_qemu.c以及videzzo_qemu_types.yaml以及之前编译好的库放到qemu源文件的qtest文件夹下。</p><ol start="4"><li>cluster-fuzz</li></ol><p>这里抄的qemu的oss-fuzz，为的是不带参数直接运行对目标的fuzz文件。我感觉这么处理是为了满足OSS-Fuzz的要求。qemu-fuzzer的编译脚本有这么写：</p><p><img src="C:\Users\jiangshao\AppData\Roaming\Typora\typora-user-images\image-20230721204119561.png" alt="image-20230721204119561"></p><h2 id="QTest——QEMU自带单元测试框架"><a href="#QTest——QEMU自带单元测试框架" class="headerlink" title="QTest——QEMU自带单元测试框架"></a>QTest——QEMU自带单元测试框架</h2><p>为什么再一次看qtest，（上一次看没看下去），是因为ViDeZZo确实很难看懂。虽然author在paper中闪烁其词，我还是能看出来他们参考了很多Morphuzz的实现思路的，所以这里回来看一下qtest和qemufuzzer。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://qemu.readthedocs.io/en/latest/devel/qtest.html">QTest Device Emulation Testing Framework — QEMU 8.0.0 documentation</a></p><p>qtest用于对qemu虚拟设备进行单元测试。qtest本质上是一个库，源码在<code>tests/qtest/libqtest.c</code>，<code>tests/qtest/libqtest.h</code>中定义了可用的API。另外在libqtest上还有一个libqos，往往更常用（On top of libqtest, a higher level library, <code>libqos</code>, was created to encapsulate common tasks of device drivers, such as memory management and communicating with system buses or devices. 这个还能测driver？？ 这里值得研究）。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>最基本的使用方式。</p><p>需要自己用<code>glib and libqtest/libqos API</code>编写测试脚本放到tests&#x2F;qtest&#x2F; 下面，在<code>tests/qtest/meson.build</code>加入这个脚本的编译，在相关的架构变量下面加上测试用例。运行这个测试用例的方式为make check-qtest。</p><p>理论上qtest框架只是包含上述的内容，当我想看一个例子：qemu&#x2F;tests&#x2F;qtest&#x2F;ac97-test.c的时候，我发现文档说的没错——基本上要用libqos。这里我们再看一下liboqs的相关文档。</p><h3 id="Qtest-Driver-Framework"><a href="#Qtest-Driver-Framework" class="headerlink" title="Qtest Driver Framework"></a>Qtest Driver Framework</h3><p><a href="https://qemu.readthedocs.io/en/latest/devel/qgraph.html#">Qtest Driver Framework — QEMU 8.0.0 documentation</a></p><p>使用QGraph组织测试。</p><p>文档写的什么史，根本看不懂。</p><h3 id="QEMU-Fuzzing"><a href="#QEMU-Fuzzing" class="headerlink" title="QEMU-Fuzzing"></a>QEMU-Fuzzing</h3><p><a href="https://qemu.readthedocs.io/en/latest/devel/fuzzing.html">Fuzzing — QEMU 8.0.0 documentation</a></p><p>这个文档和相关的代码应该是Alexander写的，Morphuzz的一作，这篇paper应该也是来源于此。</p><ol><li>Fuzzer的使用</li></ol><p>编译：configure的时候–enable-fuzzing 之后 make qemu-fuzz-i386。</p><p>编译出来之后，.&#x2F;qemu-fuzz-i386不带参数会显示可测的目标，添加–fuzz-target&#x3D;FUZZ_NAME参数开始测试。</p><p>注意，因为有&#x2F;fuzz&#x2F;virtio_scsi_fuzz.c这个文件，才能有.&#x2F;qemu-fuzz-i386 –fuzz-target&#x3D;virtio-scsi-fuzz这个fuzzer。</p><ol start="2"><li>Fuzzer的添加</li></ol><p>感觉和qtest一样的，用LLVM+libqtest&#x2F;libqos API去写，放到tests&#x2F;qtest&#x2F;fuzz&#x2F; 下面，在编译框架中加上。*这里的Fuzzer都是ad-hoc的，对每一个设备单独写。</p><p>有一个特殊的generic-fuzz，通过给环境变量给参数从而Fuzz目标设备，比如这样给参数：<img src="C:\Users\jiangshao\AppData\Roaming\Typora\typora-user-images\image-20230721221541450.png" alt="image-20230721221541450"></p><p><img src="C:\Users\jiangshao\AppData\Roaming\Typora\typora-user-images\image-20230721221548048.png" alt="image-20230721221548048"></p><ol start="3"><li>0SS-Fuzz</li></ol><p>这下能看懂ViDeZZo的一些奇怪代码和编译指令了，原来是源自这里！</p><p>因为generic-fuzz需要环境变量，为了不用环境变量直接是一个可执行文件的形式（可能是为了加入OSS-Fuzz吧），tests&#x2F;qtest&#x2F;fuzz&#x2F;generic_fuzz_configs.h这里面给了一些配置。build的方法也给出来了：<img src="C:\Users\jiangshao\AppData\Roaming\Typora\typora-user-images\image-20230721222012503.png" alt="image-20230721222012503"></p><p>ViDeZZo直<a href="https://github.com/HexHive/ViDeZZo/tree/master/videzzo_qemu">videzzo_qemu</a>&#x2F;videzzo_qemu.c应该是参考这里写的。</p><ol start="4"><li>实现原理</li></ol><p>整体的原理在fuzz.c里面，相当于一个Framework。框架的入口点在这里：</p><p><img src="C:\Users\jiangshao\AppData\Roaming\Typora\typora-user-images\image-20230721222633817.png" alt="image-20230721222633817"></p><p>这里fuzz_target-&gt;fuzz()不出意外就是自定义的ad-hoc fuzzer或者那个generic-fuzzer提供的一个回调，用于对目标设备执行一次模糊行为。在实现模糊行为的过程中，Qemuphuzz（为什么我突然这么叫了？因为这里我去看了paper，发现标准的叫法应该是这个 ：）强烈谴责ViDeZZo作者的不严谨）首先将libfuzzer产生的字节码解码成IO操作，之后利用libqos和libqtest与设备进行交互。</p><p><img src="C:\Users\jiangshao\AppData\Roaming\Typora\typora-user-images\image-20230721222309272.png" alt="image-20230721222309272"></p><p>具体怎么交互的参考paper的section 4.4.2。 连上了，都连上了！</p><p>这么看来，ViDeZZo几乎重写了Qemuphuzz的框架，基本的执行流也是一样的。</p><h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><p>绕得有点远，应该回来了，我们的正题是ViDeZZo。但是因为想回去吃夜宵了，下次再看源码。</p><p>待续。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;纪念我的第二篇Blog，第一篇有我的idea就不放出来了。&lt;/p&gt;
&lt;p&gt;纪念浙江大学玉泉校区曹主楼320的橙色暴雨预警的深夜。&lt;/p&gt;
&lt;p&gt;给个书读吧求求了。——js 7.21&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;编译构建&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Virtual Device Fuzzing" scheme="http://example.com/tags/Virtual-Device-Fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/07/17/hello-world/"/>
    <id>http://example.com/2023/07/17/hello-world/</id>
    <published>2023-07-17T10:47:41.880Z</published>
    <updated>2023-07-17T11:14:43.205Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-js"><a href="#Quick-Start-js" class="headerlink" title="Quick Start - js"></a>Quick Start - js</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
